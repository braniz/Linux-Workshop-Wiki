====== 07 - Quick Install für Fortgeschrittene ======

===== Lernziele =====

Nach dieser Lektion können Sie:
  * Nextcloud mit einem einzigen Skript vollautomatisch installieren
  * Template-basierte Installationen für verschiedene Szenarien erstellen
  * Deployment-Prozesse für Schulungs- und Produktionsumgebungen automatisieren
  * Best-Practice-Konfigurationen schnell implementieren

===== Vollautomatisches Installations-Skript =====

**Ein-Klick-Installation erstellen:**
<code>
sudo nano /usr/local/bin/nextcloud-auto-install.sh
</code>

**Vollständiges Installations-Skript:**
<code>
#!/bin/bash
# Nextcloud Vollautomatische Installation
# Für Ubuntu 24.04 LTS - Schulungsversion
# Version 2.0 - Juli 2025

set -e  # Bei Fehler abbrechen

# Farben für Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging
LOG_FILE="/var/log/nextcloud-install.log"
exec > >(tee -a $LOG_FILE)
exec 2>&1

echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}Nextcloud Automatische Installation${NC}"
echo -e "${BLUE}Schulungsversion - $(date)${NC}"
echo -e "${BLUE}================================${NC}"

# Konfiguration (Schulungsumgebung)
NC_ADMIN_USER="Admin"
NC_ADMIN_PASS="Start1234"
DB_ROOT_PASS="Start1234"
DB_USER="nc_user"
DB_PASS="nc_pass"
DB_NAME="nextcloud"
NC_VERSION="30.0.2"
DOMAIN=$(hostname -I | awk '{print $1}')

echo -e "${YELLOW}Installationsparameter:${NC}"
echo "- Admin: $NC_ADMIN_USER / $NC_ADMIN_PASS"
echo "- DB: $DB_USER / $DB_PASS"
echo "- Domain: $DOMAIN"
echo ""

# Benutzer-Bestätigung
read -p "Installation starten? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Installation abgebrochen."
    exit 1
fi

echo -e "${BLUE}=== Phase 1: System vorbereiten ===${NC}"

# System aktualisieren
echo -e "${YELLOW}System wird aktualisiert...${NC}"
apt update && apt upgrade -y

# Basis-Pakete installieren
echo -e "${YELLOW}Basis-Pakete installieren...${NC}"
apt install -y wget curl unzip zip software-properties-common apt-transport-https ca-certificates

echo -e "${BLUE}=== Phase 2: LAMP Stack installieren ===${NC}"

# Apache installieren
echo -e "${YELLOW}Apache installieren...${NC}"
apt install -y apache2
systemctl enable apache2
systemctl start apache2

# MariaDB installieren
echo -e "${YELLOW}MariaDB installieren...${NC}"
apt install -y mariadb-server mariadb-client
systemctl enable mariadb
systemctl start mariadb

# MariaDB sichern (automatisch)
echo -e "${YELLOW}MariaDB konfigurieren...${NC}"
mysql -e "UPDATE mysql.user SET Password=PASSWORD('$DB_ROOT_PASS') WHERE User='root'"
mysql -e "DELETE FROM mysql.user WHERE User=''"
mysql -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
mysql -e "DROP DATABASE IF EXISTS test"
mysql -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'"
mysql -e "FLUSH PRIVILEGES"

# PHP installieren
echo -e "${YELLOW}PHP und Module installieren...${NC}"
apt install -y php php-cli php-fpm php-mysql php-xml php-gd php-curl php-mbstring \
    php-intl php-bcmath php-gmp php-zip libapache2-mod-php

# Performance-Module
apt install -y php-apcu php-redis redis-server php-imagick libmagickcore-6.q16-6-extra

echo -e "${BLUE}=== Phase 3: Services konfigurieren ===${NC}"

# Redis starten
systemctl enable redis-server
systemctl start redis-server

# Apache-Module aktivieren
a2enmod rewrite headers env dir mime setenvif expires

# PHP optimieren
echo -e "${YELLOW}PHP optimieren...${NC}"
cat > /etc/php/8.3/apache2/conf.d/99-nextcloud.ini << EOF
memory_limit = 1024M
upload_max_filesize = 1G
post_max_size = 1G
max_execution_time = 300
max_input_time = 300
output_buffering = Off

[opcache]
opcache.enable=1
opcache.enable_cli=1
opcache.interned_strings_buffer=16
opcache.max_accelerated_files=10000
opcache.memory_consumption=128
opcache.save_comments=1
opcache.revalidate_freq=1
opcache.validate_timestamps=1
EOF

# APCu konfigurieren
cat > /etc/php/8.3/mods-available/apcu.ini << EOF
extension=apcu.so
apc.enabled=1
apc.enable_cli=1
apc.shm_size=64M
apc.num_files_hint=7000
apc.user_entries_hint=4096
apc.ttl=7200
apc.user_ttl=7200
apc.gc_ttl=3600
apc.max_file_size=1M
apc.stat=1
EOF

# Apache für Nextcloud konfigurieren
echo -e "${YELLOW}Apache konfigurieren...${NC}"
cat > /etc/apache2/sites-available/000-default.conf << EOF
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    
    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
    
    <Directory /var/www/html>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
    
    <IfModule mod_headers.c>
        Header always set Strict-Transport-Security "max-age=15552000; includeSubDomains"
        Header always set X-Content-Type-Options nosniff
        Header always set X-Frame-Options DENY
        Header always set X-XSS-Protection "1; mode=block"
        Header always set Referrer-Policy "no-referrer"
        
        Redirect 301 /.well-known/carddav /nextcloud/remote.php/dav
        Redirect 301 /.well-known/caldav /nextcloud/remote.php/dav
        Redirect 301 /.well-known/webfinger /nextcloud/index.php/.well-known/webfinger
        Redirect 301 /.well-known/nodeinfo /nextcloud/index.php/.well-known/nodeinfo
    </IfModule>
</VirtualHost>
EOF

echo -e "${BLUE}=== Phase 4: Nextcloud installieren ===${NC}"

# Nextcloud herunterladen
echo -e "${YELLOW}Nextcloud $NC_VERSION herunterladen...${NC}"
cd /var/www/html
wget -q https://download.nextcloud.com/server/releases/nextcloud-$NC_VERSION.zip
unzip -q nextcloud-$NC_VERSION.zip
rm nextcloud-$NC_VERSION.zip

# Berechtigungen setzen
chown -R www-data:www-data /var/www/html/nextcloud/
chmod -R 755 /var/www/html/nextcloud/

echo -e "${BLUE}=== Phase 5: Datenbank einrichten ===${NC}"

# Nextcloud-Datenbank erstellen
echo -e "${YELLOW}Datenbank konfigurieren...${NC}"
mysql -u root -p$DB_ROOT_PASS << EOF
CREATE DATABASE $DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';
FLUSH PRIVILEGES;
EOF

echo -e "${BLUE}=== Phase 6: Services neustarten ===${NC}"

# Alle Services neustarten
systemctl restart apache2
systemctl restart mariadb
systemctl restart redis-server

# Warten bis Services bereit sind
echo -e "${YELLOW}Warte auf Services...${NC}"
sleep 5

echo -e "${BLUE}=== Phase 7: Nextcloud-Setup ===${NC}"

# Automatisches Nextcloud-Setup über OCC
echo -e "${YELLOW}Nextcloud konfigurieren...${NC}"
cd /var/www/html/nextcloud

sudo -u www-data php occ maintenance:install \
    --database "mysql" \
    --database-name "$DB_NAME" \
    --database-user "$DB_USER" \
    --database-pass "$DB_PASS" \
    --admin-user "$NC_ADMIN_USER" \
    --admin-pass "$NC_ADMIN_PASS" \
    --data-dir "/var/www/html/nextcloud/data"

echo -e "${BLUE}=== Phase 8: Optimierungen anwenden ===${NC}"

# Trusted Domain hinzufügen
echo -e "${YELLOW}Trusted Domains konfigurieren...${NC}"
sudo -u www-data php occ config:system:set trusted_domains 0 --value="localhost"
sudo -u www-data php occ config:system:set trusted_domains 1 --value="$DOMAIN"

# Caching konfigurieren
echo -e "${YELLOW}Caching aktivieren...${NC}"
sudo -u www-data php occ config:system:set memcache.local --value="\\OC\\Memcache\\APCu"
sudo -u www-data php occ config:system:set memcache.locking --value="\\OC\\Memcache\\Redis"
sudo -u www-data php occ config:system:set redis host --value="localhost"
sudo -u www-data php occ config:system:set redis port --value=6379

# Weitere Optimierungen
sudo -u www-data php occ config:system:set default_phone_region --value="DE"
sudo -u www-data php occ config:system:set maintenance_window_start --value=1

# Cron-Job einrichten
echo -e "${YELLOW}Cron-Jobs einrichten...${NC}"
crontab -u www-data -l 2>/dev/null | { cat; echo "*/5 * * * * php /var/www/html/nextcloud/cron.php"; } | crontab -u www-data -

# Hintergrundaufgaben auf Cron umstellen
sudo -u www-data php occ background:cron

# Datenbank optimieren
echo -e "${YELLOW}Datenbank optimieren...${NC}"
sudo -u www-data php occ db:add-missing-indices

echo -e "${BLUE}=== Phase 9: Backup-System einrichten ===${NC}"

# Backup-Verzeichnis erstellen
mkdir -p /backup/nextcloud
mkdir -p /usr/local/bin

# Einfaches Backup-Script erstellen
cat > /usr/local/bin/nextcloud-backup.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backup/nextcloud"

# Wartungsmodus aktivieren
sudo -u www-data php /var/www/html/nextcloud/occ maintenance:mode --on

# Datenbank-Backup
mysqldump -u nc_user -pnc_pass nextcloud | gzip > $BACKUP_DIR/db-backup-$DATE.sql.gz

# Dateien-Backup
tar -czf $BACKUP_DIR/files-backup-$DATE.tar.gz -C /var/www/html nextcloud/

# Wartungsmodus deaktivieren
sudo -u www-data php /var/www/html/nextcloud/occ maintenance:mode --off

echo "Backup erstellt: $DATE"
EOF

chmod +x /usr/local/bin/nextcloud-backup.sh

echo -e "${BLUE}=== Installation abgeschlossen! ===${NC}"

# Finaler Status-Check
echo -e "${YELLOW}System-Check durchführen...${NC}"
systemctl status apache2 --no-pager -l
systemctl status mariadb --no-pager -l
systemctl status redis-server --no-pager -l

# Nextcloud-Status
sudo -u www-data php /var/www/html/nextcloud/occ status

echo ""
echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}Installation erfolgreich!${NC}"
echo -e "${GREEN}================================${NC}"
echo ""
echo -e "${YELLOW}Zugang zur Nextcloud:${NC}"
echo "URL: http://$DOMAIN/nextcloud"
echo "Admin: $NC_ADMIN_USER"
echo "Passwort: $NC_ADMIN_PASS"
echo ""
echo -e "${YELLOW}Nächste Schritte:${NC}"
echo "1. Nextcloud im Browser öffnen"
echo "2. Einstellungen überprüfen"
echo "3. Apps installieren/deaktivieren"
echo "4. Benutzer erstellen"
echo "5. Backup testen: /usr/local/bin/nextcloud-backup.sh"
echo ""
echo -e "${YELLOW}Log-Datei: $LOG_FILE${NC}"
echo ""
</code>

**Script ausführbar machen:**
<code>
sudo chmod +x /usr/local/bin/nextcloud-auto-install.sh
</code>

===== Template-basierte Installationen =====

==== Produktions-Template ====

**Sicherheits-optimierte Version für Produktions-Umgebungen:**
<code>
sudo nano /usr/local/bin/nextcloud-production-install.sh
</code>

**Produktions-Installations-Script (Auszug der Unterschiede):**
<code>
#!/bin/bash
# Nextcloud Produktions-Installation
# Für Ubuntu 24.04 LTS - Produktionsversion

# Sichere Konfiguration
NC_ADMIN_USER="nc_admin_$(openssl rand -hex 4)"
NC_ADMIN_PASS="$(openssl rand -base64 32)"
DB_ROOT_PASS="$(openssl rand -base64 32)"
DB_USER="nc_user_$(openssl rand -hex 4)"
DB_PASS="$(openssl rand -base64 32)"

# SSL-Zertifikate (Let's Encrypt)
DOMAIN="nextcloud.example.com"  # Anzupassen!
EMAIL="admin@example.com"       # Anzupassen!

# Zusätzliche Sicherheits-Pakete
apt install -y ufw fail2ban certbot python3-certbot-apache

# Firewall konfigurieren
ufw --force enable
ufw allow 22
ufw allow 80
ufw allow 443

# Let's Encrypt SSL
certbot --apache -d $DOMAIN --email $EMAIL --agree-tos --non-interactive

# Fail2Ban für Nextcloud
cat > /etc/fail2ban/jail.d/nextcloud.conf << EOF
[nextcloud]
enabled = true
port = 80,443
protocol = tcp
filter = nextcloud
maxretry = 3
bantime = 3600
findtime = 36000
logpath = /var/www/html/nextcloud/data/nextcloud.log
EOF

# Zusätzliche PHP-Sicherheitseinstellungen
cat >> /etc/php/8.3/apache2/conf.d/99-security.ini << EOF
expose_php = Off
allow_url_fopen = Off
allow_url_include = Off
session.cookie_httponly = 1
session.use_only_cookies = 1
session.cookie_secure = 1
EOF

# Passwörter sicher speichern
echo "NEXTCLOUD PRODUCTION CREDENTIALS" > /root/nextcloud-credentials.txt
echo "Generated: $(date)" >> /root/nextcloud-credentials.txt
echo "Admin User: $NC_ADMIN_USER" >> /root/nextcloud-credentials.txt
echo "Admin Pass: $NC_ADMIN_PASS" >> /root/nextcloud-credentials.txt
echo "DB User: $DB_USER" >> /root/nextcloud-credentials.txt
echo "DB Pass: $DB_PASS" >> /root/nextcloud-credentials.txt
chmod 600 /root/nextcloud-credentials.txt

echo "WICHTIG: Zugangsdaten gespeichert in /root/nextcloud-credentials.txt"
</code>

==== Entwicklungs-Template ====

**Entwickler-optimierte Version:**
<code>
sudo nano /usr/local/bin/nextcloud-dev-install.sh
</code>

**Entwicklungs-Template-Features:**
<code>
# Debug-Modus aktivieren
sudo -u www-data php occ config:system:set debug --value=true --type=boolean
sudo -u www-data php occ config:system:set loglevel --value=0

# Entwickler-Apps aktivieren
sudo -u www-data php occ app:enable files_external
sudo -u www-data php occ app:enable user_ldap

# Mail-Catcher für lokale Entwicklung
apt install -y mailcatcher
# mailcatcher --http-ip=0.0.0.0

# Git-Integration für Theme-Entwicklung
apt install -y git nodejs npm

# Xdebug für PHP-Debugging
apt install -y php-xdebug
cat >> /etc/php/8.3/apache2/conf.d/20-xdebug.ini << EOF
xdebug.mode=develop,debug
xdebug.start_with_request=yes
xdebug.client_host=localhost
xdebug.client_port=9003
EOF
</code>

===== Multi-Instanz-Deployment =====

**Mehrere Nextcloud-Instanzen automatisch erstellen:**
<code>
sudo nano /usr/local/bin/nextcloud-multi-deploy.sh
</code>

**Multi-Instanz-Script:**
<code>
#!/bin/bash
# Nextcloud Multi-Instanz Deployment
# Erstellt mehrere isolierte Nextcloud-Instanzen

INSTANCES=("workshop1" "workshop2" "workshop3" "demo")
BASE_PORT=8080

for INSTANCE in "${INSTANCES[@]}"; do
    echo "Erstelle Instanz: $INSTANCE"
    
    # Unique Port
    PORT=$((BASE_PORT++))
    
    # Instanz-Verzeichnis
    INSTANCE_DIR="/var/www/$INSTANCE"
    mkdir -p $INSTANCE_DIR
    
    # Nextcloud kopieren
    cp -r /var/www/html/nextcloud/* $INSTANCE_DIR/
    
    # Unique Database
    DB_NAME="nc_$INSTANCE"
    mysql -u root -pStart1234 -e "CREATE DATABASE $DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"
    mysql -u root -pStart1234 -e "GRANT ALL PRIVILEGES ON $DB_NAME.* TO 'nc_user'@'localhost';"
    
    # Apache Virtual Host
    cat > /etc/apache2/sites-available/$INSTANCE.conf << EOF
<VirtualHost *:$PORT>
    DocumentRoot $INSTANCE_DIR
    ServerName $INSTANCE.local
    
    <Directory $INSTANCE_DIR>
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>
EOF
    
    # Port aktivieren
    echo "Listen $PORT" >> /etc/apache2/ports.conf
    a2ensite $INSTANCE
    
    # Berechtigungen
    chown -R www-data:www-data $INSTANCE_DIR
    
    echo "Instanz $INSTANCE verfügbar auf Port $PORT"
done

systemctl reload apache2
echo "Multi-Instanz-Deployment abgeschlossen!"
</code>

===== Konfigurationsmanagement =====

**Template-basierte Konfiguration:**
<code>
sudo nano /usr/local/bin/nextcloud-config-templates.sh
</code>

**Konfigurations-Templates:**
<code>
#!/bin/bash
# Nextcloud Konfigurations-Templates

TEMPLATE_DIR="/etc/nextcloud-templates"
mkdir -p $TEMPLATE_DIR

# Basis-Konfiguration Template
cat > $TEMPLATE_DIR/config-base.php << 'EOF'
<?php
$CONFIG = array (
  'instanceid' => '%%INSTANCE_ID%%',
  'passwordsalt' => '%%PASSWORD_SALT%%',
  'secret' => '%%SECRET%%',
  'trusted_domains' => array (
    0 => '%%DOMAIN%%',
  ),
  'datadirectory' => '%%DATA_DIR%%',
  'dbtype' => 'mysql',
  'dbname' => '%%DB_NAME%%',
  'dbhost' => 'localhost',
  'dbuser' => '%%DB_USER%%',
  'dbpassword' => '%%DB_PASS%%',
  'installed' => true,
  'default_phone_region' => 'DE',
  'maintenance_window_start' => 1,
  'memcache.local' => '\\OC\\Memcache\\APCu',
  'memcache.locking' => '\\OC\\Memcache\\Redis',
  'redis' => array (
    'host' => 'localhost',
    'port' => 6379,
  ),
  'loglevel' => 2,
  'log_type' => 'file',
);
EOF

# Performance-optimierte Konfiguration
cat > $TEMPLATE_DIR/config-performance.php << 'EOF'
  'enable_previews' => true,
  'enabledPreviewProviders' => array (
    'OC\\Preview\\PNG',
    'OC\\Preview\\JPEG',
    'OC\\Preview\\GIF',
    'OC\\Preview\\BMP',
    'OC\\Preview\\XBitmap',
    'OC\\Preview\\MP3',
    'OC\\Preview\\TXT',
    'OC\\Preview\\MarkDown',
  ),
  'preview_max_x' => 1024,
  'preview_max_y' => 1024,
  'preview_max_scale_factor' => 1,
  'jpeg_quality' => 60,
EOF

# Sicherheits-optimierte Konfiguration
cat > $TEMPLATE_DIR/config-security.php << 'EOF'
  'overwriteprotocol' => 'https',
  'forcessl' => true,
  'check_for_working_wellknown_setup' => true,
  'auth.bruteforce.protection.enabled' => true,
  'blacklisted_files' => array (
    '.htaccess',
    'Thumbs.db',
    'thumbs.db',
  ),
  'csp.UserAgent' => '%%CSP_USER_AGENT%%',
  'integrity.check.disabled' => false,
  'updatechecker' => true,
EOF

echo "Konfigurations-Templates erstellt in $TEMPLATE_DIR"
</code>

===== Deployment-Automatisierung =====

**Docker-ähnliches Deployment:**
<code>
sudo nano /usr/local/bin/nextcloud-deploy.sh
</code>

**Deployment-Orchestrator:**
<code>
#!/bin/bash
# Nextcloud Deployment Orchestrator

DEPLOYMENT_TYPE=${1:-"workshop"}
INSTANCE_NAME=${2:-"nextcloud"}

case $DEPLOYMENT_TYPE in
    "workshop")
        echo "Deploying Workshop-Version..."
        /usr/local/bin/nextcloud-auto-install.sh
        ;;
    "production")
        echo "Deploying Production-Version..."
        /usr/local/bin/nextcloud-production-install.sh
        ;;
    "development")
        echo "Deploying Development-Version..."
        /usr/local/bin/nextcloud-dev-install.sh
        ;;
    "multi")
        echo "Deploying Multi-Instance..."
        /usr/local/bin/nextcloud-multi-deploy.sh
        ;;
    *)
        echo "Usage: $0 {workshop|production|development|multi} [instance_name]"
        echo ""
        echo "Deployment-Typen:"
        echo "  workshop    - Einfache Installation für Schulungen"
        echo "  production  - Sicherheits-optimiert für Produktions-Einsatz"
        echo "  development - Debug-optimiert für Entwickler"
        echo "  multi       - Mehrere isolierte Instanzen"
        exit 1
        ;;
esac
</code>

===== Best-Practice-Zusammenfassung =====

**Checkliste für optimale Nextcloud-Installation:**

**📋 Sicherheit:**
  * ✅ Starke, einzigartige Passwörter
  * ✅ SSL/TLS-Verschlüsselung (Produktion)
  * ✅ Firewall konfiguriert
  * ✅ Fail2Ban eingerichtet
  * ✅ Regelmäßige Updates

**⚡ Performance:**
  * ✅ APCu-Caching aktiviert
  * ✅ Redis für Locking konfiguriert
  * ✅ PHP OPcache optimiert
  * ✅ Datenbank-Indizes aktuell
  * ✅ Preview-Limits gesetzt

**🔧 Wartbarkeit:**
  * ✅ Automatische Backups
  * ✅ Cron-Jobs konfiguriert
  * ✅ Log-Rotation eingerichtet
  * ✅ Monitoring implementiert
  * ✅ Update-Strategie definiert

**📁 Organisation:**
  * ✅ Klare Verzeichnisstruktur
  * ✅ Dokumentierte Konfiguration
  * ✅ Versionskontrolle für Scripts
  * ✅ Disaster-Recovery-Plan
  * ✅ Benutzer-Schulung

===== Workshop-Abschluss =====

**🎓 Herzlichen Glückwunsch!**

Sie haben erfolgreich alle Aspekte der Nextcloud-Installation und -Verwaltung gemeistert:

**Gelernte Fähigkeiten:**
  * ✅ Manuelle Installation und Konfiguration
  * ✅ Performance-Optimierung
  * ✅ Backup und Wiederherstellung
  * ✅ Troubleshooting und Problemlösung
  * ✅ Automatisierte Deployment-Prozesse

**Verfügbare Tools nach diesem Workshop:**
  * `nextcloud-auto-install.sh` - Vollautomatische Installation
  * `nextcloud-production-install.sh` - Produktions-Setup
  * `nextcloud-backup.sh` - Backup-System
  * `nextcloud-deploy.sh` - Deployment-Orchestrator

===== Weiterführende Themen =====

**Für den produktiven Einsatz:**
  * **SSL/TLS mit Let's Encrypt** - Automatische Zertifikate
  * **Reverse Proxy** - nginx oder Apache als Frontend
  * **High Availability** - Cluster-Setup mit mehreren Servern
  * **Container-Deployment** - Docker und Kubernetes
  * **External Storage** - S3, NFS, SFTP Integration

**Erweiterte Administration:**
  * **LDAP/Active Directory** - Benutzer-Integration
  * **Single Sign-On (SSO)** - SAML/OAuth Integration
  * **Nextcloud Office** - Kollaborative Dokument-Bearbeitung
  * **Talk (Video-Chat)** - High Performance Backend
  * **Custom Apps** - Entwicklung eigener Nextcloud-Apps

===== Ressourcen für Weiterbildung =====

**Offizielle Dokumentation:**
  * [[https://docs.nextcloud.com/|Nextcloud Administration Manual]]
  * [[https://docs.nextcloud.com/server/stable/developer_manual/|Developer Manual]]
  * [[https://help.nextcloud.com/|Community Forum]]

**Zertifizierungen:**
  * [[https://nextcloud.com/training/|Nextcloud Partner Training]]
  * [[https://nextcloud.com/enterprise/|Enterprise Support]]

**Community:**
  * [[https://github.com/nextcloud/server|GitHub Repository]]
  * [[https://mastodon.xyz/@nextcloud|Nextcloud auf Mastodon]]
  * [[https://www.reddit.com/r/NextCloud/|Reddit Community]]

===== Quick-Reference-Befehle =====

**Wichtigste OCC-Befehle:**
<code>
# Status und Diagnose
sudo -u www-data php occ status
sudo -u www-data php occ check
sudo -u www-data php occ setupchecks

# Wartung
sudo -u www-data php occ maintenance:mode --on/--off
sudo -u www-data php occ upgrade
sudo -u www-data php occ db:add-missing-indices

# Benutzer-Verwaltung
sudo -u www-data php occ user:list
sudo -u www-data php occ user:add username
sudo -u www-data php occ user:resetpassword username

# Apps
sudo -u www-data php occ app:list
sudo -u www-data php occ app:enable app_name
sudo -u www-data php occ app:disable app_name

# Dateien
sudo -u www-data php occ files:scan --all
sudo -u www-data php occ files:cleanup
</code>

**System-Administration:**
<code>
# Services verwalten
sudo systemctl restart apache2 mariadb redis-server
sudo systemctl status apache2 mariadb redis-server

# Logs überwachen
sudo tail -f /var/log/apache2/error.log
sudo tail -f /var/www/html/nextcloud/data/nextcloud.log

# Backup erstellen
/usr/local/bin/nextcloud-backup.sh

# Installation reparieren
sudo chown -R www-data:www-data /var/www/html/nextcloud/
sudo -u www-data php occ maintenance:repair
</code>

**🚀 Sie sind bereit für den produktiven Nextcloud-Einsatz!**

===== Danksagung =====

**Vielen Dank für Ihre Teilnahme am Nextcloud-Workshop!**

Diese Unterlagen wurden erstellt für praktische, hands-on Erfahrung mit Nextcloud. Alle Scripts und Konfigurationen sind in der realen Praxis getestet.

**Feedback willkommen:** Verbesserungsvorschläge und Erfahrungen aus der Praxis helfen, diese Unterlagen zu verbessern.

**Workshop-Version:** 2.0 (Juli 2025)
**Letzte Aktualisierung:** Nextcloud 30.x, Ubuntu 24.04 LTS
**Getestet:** ✅ Produktions-Umgebungen, ✅ Schulungs-Setups
