====== grep ======

**grep** - Text in Dateien oder Streams mit regulären Ausdrücken suchen.

===== Syntax =====

<code>
grep [OPTIONEN] PATTERN [DATEI...]
grep [OPTIONEN] -e PATTERN [DATEI...]
grep [OPTIONEN] -f PATTERN-DATEI [DATEI...]
</code>

===== Beschreibung =====

**grep** (Global Regular Expression Print) durchsucht Dateien oder Eingabestreams nach Zeilen, die einem bestimmten Muster entsprechen, und gibt diese aus.

===== Wichtige Optionen =====

**Grundlegende Optionen:**
^ Option ^ Beschreibung ^
| **-i** | Groß-/Kleinschreibung ignorieren |
| **-v** | Zeilen ausgeben, die NICHT dem Muster entsprechen |
| **-n** | Zeilennummern mit ausgeben |
| **-H** | Dateinamen mit ausgeben (bei mehreren Dateien) |
| **-h** | Dateinamen nicht ausgeben |
| **-c** | Nur Anzahl der Treffer ausgeben |
| **-l** | Nur Dateinamen mit Treffern ausgeben |
| **-L** | Nur Dateinamen ohne Treffer ausgeben |

**Kontext-Optionen:**
^ Option ^ Beschreibung ^
| **-A num** | num Zeilen nach dem Treffer anzeigen |
| **-B num** | num Zeilen vor dem Treffer anzeigen |
| **-C num** | num Zeilen vor und nach dem Treffer |
| **--color** | Treffer farbig hervorheben |

**Pattern-Optionen:**
^ Option ^ Beschreibung ^
| **-E** | Erweiterte reguläre Ausdrücke (egrep) |
| **-F** | Feste Zeichenketten, keine Regex (fgrep) |
| **-P** | Perl-kompatible reguläre Ausdrücke |
| **-w** | Nur ganze Wörter finden |
| **-x** | Nur ganze Zeilen finden |

**Rekursive Suche:**
^ Option ^ Beschreibung ^
| **-r** | Rekursiv in Verzeichnissen suchen |
| **-R** | Rekursiv, folgt auch symbolischen Links |
| **--include="pattern"** | Nur bestimmte Dateien einschließen |
| **--exclude="pattern"** | Bestimmte Dateien ausschließen |
| **--exclude-dir="dir"** | Verzeichnisse ausschließen |

===== Beispiele =====

**Grundlegende Suche:**
<code>
grep "error" logfile.txt               # "error" in Datei suchen
grep -i "error" logfile.txt            # Case-insensitive Suche
grep -n "TODO" *.py                    # Mit Zeilennummern in Python-Dateien
grep -v "debug" logfile.txt            # Zeilen OHNE "debug"
</code>

**Mit Kontext:**
<code>
grep -A 3 "error" logfile.txt          # 3 Zeilen nach "error"
grep -B 2 "warning" logfile.txt        # 2 Zeilen vor "warning"
grep -C 5 "exception" logfile.txt      # 5 Zeilen vor und nach
grep --color=always "pattern" file.txt # Farbige Hervorhebung
</code>

**Mehrere Dateien:**
<code>
grep "function" *.js                   # In allen JS-Dateien
grep -l "import" *.py                  # Nur Dateinamen mit "import"
grep -c "TODO" src/*.java              # Anzahl der TODOs pro Datei
grep -H "error" /var/log/*.log         # Mit Dateinamen
</code>

**Rekursive Suche:**
<code>
grep -r "password" /etc/               # Rekursiv in /etc
grep -r --include="*.txt" "pattern" .  # Nur .txt Dateien
grep -r --exclude="*.log" "error" .    # Keine .log Dateien
grep -r --exclude-dir=node_modules "bug" . # node_modules ausschließen
</code>

**Reguläre Ausdrücke:**
<code>
grep "^error" logfile.txt              # Zeilen die mit "error" beginnen
grep "error$" logfile.txt              # Zeilen die mit "error" enden
grep "^$" file.txt                     # Leere Zeilen
grep "[0-9]\{3\}" file.txt             # Drei aufeinanderfolgende Ziffern
grep -E "error|warning|fatal" log.txt  # Mehrere Begriffe (OR)
</code>

**Erweiterte reguläre Ausdrücke (-E):**
<code>
grep -E "^[a-zA-Z]+@[a-zA-Z]+\.[a-zA-Z]+" file.txt  # E-Mail-Adressen
grep -E "(http|https)://[^[:space:]]+" file.txt     # URLs finden
grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" file.txt  # IP-Adressen
grep -E "\b[A-Z]{2,}\b" file.txt       # Wörter in Großbuchstaben
</code>

**Feste Zeichenketten (-F):**
<code>
grep -F "$(cat patterns.txt)" data.txt # Mehrere feste Patterns
grep -F ".*[special]" file.txt         # Literale Suche nach Sonderzeichen
fgrep "literal.string" file.txt        # Alias für grep -F
</code>

**Mit Pipes:**
<code>
ps aux | grep nginx                    # Prozesse mit "nginx"
cat /var/log/syslog | grep -i error    # Fehler im Syslog
dmesg | grep -E "(error|fail)"         # Kernel-Fehler
ls -la | grep "^d"                     # Nur Verzeichnisse
</code>

**Pattern aus Datei:**
<code>
grep -f patterns.txt data.txt          # Patterns aus Datei lesen
grep -F -f wordlist.txt document.txt   # Wortliste abarbeiten
</code>

===== Praktische Anwendungen =====

**Log-Analyse:**
<code>
grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" access.log  # IP-Adressen
grep "404" access.log | wc -l          # Anzahl 404-Fehler
grep -A 10 -B 5 "FATAL" application.log # Kontext um fatale Fehler
tail -f /var/log/syslog | grep --color error  # Live-Monitoring
</code>

**Code-Suche:**
<code>
grep -r "function.*user" src/          # Funktionen mit "user"
grep -n "TODO\|FIXME\|BUG" *.py       # Entwickler-Kommentare
grep -r --include="*.java" "public.*main" .  # Main-Methoden
grep -v "^#\|^$" config.conf           # Aktive Konfiguration (ohne Kommentare)
</code>

**System-Administration:**
<code>
grep "^user:" /etc/passwd              # Benutzer "user" finden
grep -v "^#" /etc/ssh/sshd_config      # Aktive SSH-Konfiguration
ps aux | grep -v grep | grep apache    # Apache-Prozesse (ohne grep selbst)
netstat -tuln | grep ":80 "           # Port 80 Verbindungen
</code>

**Daten-Extraktion:**
<code>
grep -oE "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b" file.txt  # E-Mails extrahieren
grep -oE "\b[0-9]{1,3}(\.[0-9]{1,3}){3}\b" file.txt  # IPs extrahieren
grep -oP '(?<=href=")[^"]*' file.html  # Links aus HTML extrahieren
</code>

===== Kombinationen mit anderen Befehlen =====

<code>
find . -name "*.log" -exec grep -l "error" {} \;  # Dateien mit Fehlern finden
grep -r "pattern" . | cut -d: -f1 | sort | uniq  # Eindeutige Dateinamen
grep -c "pattern" *.txt | grep -v ":0"  # Dateien mit Treffern
xargs grep "pattern" < file_list.txt    # Suche in Dateiliste
</code>

===== Performance-Tipps =====

  * **-F** für feste Zeichenketten ist schneller als Regex
  * **--include/--exclude** reduziert zu durchsuchende Dateien
  * **-m NUM** limitiert Treffer pro Datei
  * **LC_ALL=C** kann bei großen Dateien schneller sein

===== Häufige Muster =====

<code>
# E-Mail-Adressen
grep -E "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"

# IP-Adressen
grep -E "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"

# URLs
grep -E "(http|https)://[^[:space:]]+"

# Telefonnummern (deutsch)
grep -E "\b[0-9]{3,4}[-/][0-9]{6,8}\b"

# Datum (YYYY-MM-DD)
grep -E "[0-9]{4}-[0-9]{2}-[0-9]{2}"
</code>

===== Verwandte Befehle =====

  * **egrep** - Alias für grep -E (erweiterte Regex)
  * **fgrep** - Alias für grep -F (feste Zeichenketten)
  * **rgrep** - Alias für grep -r (rekursiv)
  * **ack** - Modernere Alternative zu grep
  * **ag** (The Silver Searcher) - Sehr schnelle grep-Alternative
  * **ripgrep** (rg) - Extrem schnelle grep-Alternative in Rust
  * **find** - Dateien nach Namen/Eigenschaften suchen
  * **sed** - Stream-Editor mit Pattern-Matching

===== Siehe auch =====

  * **man grep** - Ausführliche Dokumentation
  * **man regex** - Reguläre Ausdrücke
  * **info grep** - Detaillierte Info-Seiten
