====== 09 - Bootvorgang, cron incron ======

Der Linux-Bootvorgang und automatisierte Task-Scheduling mit cron/incron sind fundamentale Aspekte der Systemadministration für Automatisierung und System-Management.

===== Syntax =====

**Systemd Services (moderne Linux-Distributionen):**
<code>
# Service-Status und -Verwaltung
systemctl status service_name       # Service-Status anzeigen
systemctl start service_name        # Service starten
systemctl stop service_name         # Service stoppen
systemctl restart service_name      # Service neu starten
systemctl reload service_name       # Service-Konfiguration neu laden
systemctl enable service_name       # Service beim Boot aktivieren
systemctl disable service_name      # Service beim Boot deaktivieren

# System-Zustand
systemctl list-units --type=service # Alle Services anzeigen
systemctl list-units --failed       # Fehlgeschlagene Services
systemctl get-default               # Standard-Target anzeigen
systemctl set-default multi-user.target  # Runlevel setzen
</code>

**Cron (Zeitgesteuerte Aufgaben):**
<code>
# Crontab bearbeiten
crontab -e                          # Eigene Crontab editieren
crontab -l                          # Eigene Crontab anzeigen
crontab -r                          # Eigene Crontab löschen
sudo crontab -u username -e         # Crontab für anderen Benutzer

# Cron-Format: Minute Stunde Tag Monat Wochentag Befehl
# * * * * * /path/to/command
# 0 2 * * * /usr/bin/backup.sh      # Täglich um 2:00 Uhr
# */15 * * * * /usr/bin/check.sh    # Alle 15 Minuten
</code>

**Incron (Dateisystem-Events):**
<code>
# Incrontab bearbeiten
incrontab -e                        # Incrontab editieren
incrontab -l                        # Incrontab anzeigen
incrontab -r                        # Incrontab löschen

# Incron-Format: Pfad Ereignis Befehl
# /home/user/watched IN_CREATE /usr/bin/process.sh $@/$#
# /var/log IN_MODIFY /usr/bin/log-process.sh $@
</code>

----

===== Wichtige Optionen =====

**Systemd Targets (Runlevel):**
  * **poweroff.target**: System herunterfahren (Runlevel 0)
  * **rescue.target**: Single-User Mode (Runlevel 1)
  * **multi-user.target**: Multi-User ohne GUI (Runlevel 3)
  * **graphical.target**: Multi-User mit GUI (Runlevel 5)
  * **reboot.target**: System neu starten (Runlevel 6)
  * **emergency.target**: Notfall-Modus

**Cron Zeitangaben:**
  * **Minute**: 0-59
  * **Stunde**: 0-23
  * **Tag**: 1-31
  * **Monat**: 1-12
  * **Wochentag**: 0-7 (0 und 7 = Sonntag)
  * **\***: Jeder Wert
  * **,**: Mehrere Werte (1,3,5)
  * **-**: Bereich (1-5)
  * **/**: Intervall (*/15 = alle 15)
  * **@reboot**: Beim Systemstart

**Incron Events:**
  * **IN_ACCESS**: Datei wurde gelesen
  * **IN_MODIFY**: Datei wurde geändert
  * **IN_CREATE**: Datei/Verzeichnis wurde erstellt
  * **IN_DELETE**: Datei/Verzeichnis wurde gelöscht
  * **IN_MOVE**: Datei/Verzeichnis wurde verschoben
  * **IN_CLOSE_WRITE**: Datei wurde geschlossen nach Schreibvorgang
  * **IN_ALL_EVENTS**: Alle Events überwachen

**Boot-Parameter:**
  * **quiet**: Weniger Boot-Nachrichten
  * **splash**: Boot-Splash-Screen anzeigen
  * **single**: Single-User Mode
  * **init=/bin/bash**: Direkt zur Shell booten
  * **systemd.unit=**: Spezifisches Target starten

----

===== Beispiele =====

**Boot-Analyse:**
<code>
# Boot-Zeit analysieren
systemd-analyze                     # Gesamte Boot-Zeit
systemd-analyze blame               # Services nach Boot-Zeit sortiert
systemd-analyze critical-chain      # Kritischer Pfad beim Boot
systemd-analyze plot > bootchart.svg # Grafische Boot-Analyse

# Boot-Log anzeigen
journalctl -b                       # Aktueller Boot
journalctl -b -1                    # Vorheriger Boot
journalctl --list-boots             # Alle verfügbaren Boots
dmesg                               # Kernel-Boot-Messages
</code>

**Systemd Service erstellen:**
<code>
# Service-Datei erstellen: /etc/systemd/system/myservice.service
[Unit]
Description=My Custom Service
After=network.target

[Service]
Type=simple
User=myuser
ExecStart=/usr/local/bin/myprogram
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target

# Service aktivieren
systemctl daemon-reload
systemctl enable myservice
systemctl start myservice
</code>

**Cron-Beispiele:**
<code>
# Tägliches Backup um 2:00 Uhr
0 2 * * * /usr/local/bin/backup.sh

# Alle 15 Minuten System-Check
*/15 * * * * /usr/local/bin/system-check.sh

# Montags um 9:00 Uhr Log-Rotation
0 9 * * 1 /usr/sbin/logrotate /etc/logrotate.conf

# Beim Boot-Start Dienst starten
@reboot /usr/local/bin/startup-script.sh

# Arbeitszeit-Überwachung (Mo-Fr, 9-17 Uhr)
0 9-17 * * 1-5 /usr/local/bin/work-monitor.sh

# Wöchentliches Update-Check (Sonntag 3:00)
0 3 * * 0 apt update && apt list --upgradable
</code>

**System-Level Cron:**
<code>
# System-weite Cron-Jobs
/etc/cron.d/         # Individuelle Cron-Dateien
/etc/cron.daily/     # Tägliche Scripts
/etc/cron.weekly/    # Wöchentliche Scripts
/etc/cron.monthly/   # Monatliche Scripts
/etc/cron.hourly/    # Stündliche Scripts

# Beispiel: /etc/cron.daily/cleanup
#!/bin/bash
find /tmp -type f -atime +7 -delete
find /var/log -name "*.log" -mtime +30 -delete
</code>

**Incron-Beispiele:**
<code>
# Datei-Upload überwachen
/home/user/uploads IN_CREATE /usr/local/bin/process-upload.sh $@/$#

# Log-Datei Änderungen überwachen
/var/log/application.log IN_MODIFY /usr/local/bin/alert.sh

# Konfigurationsdatei-Änderungen
/etc/nginx/nginx.conf IN_MODIFY systemctl reload nginx

# Backup bei Datei-Änderungen
/home/user/documents IN_MODIFY,IN_CREATE /usr/local/bin/backup.sh $@
</code>

----

===== Hinweis =====

**Boot-Troubleshooting:**
  * **GRUB-Recovery**: Bei Boot-Problemen GRUB-Menü verwenden
  * **Single-User Mode**: Für System-Reparaturen ohne Netzwerk
  * **Emergency Mode**: Minimales System für kritische Reparaturen
  * **Rescue Mode**: Mit Netzwerk für erweiterte Reparaturen
  * **Live-CD/USB**: Für schwerwiegende Boot-Probleme

**Systemd vs. SysV Init:**
  * **Systemd**: Parallel-Start, Dependency-Management, moderne Distributionen
  * **SysV**: Sequenzieller Start, einfache Scripts, ältere Systeme
  * **Upstart**: Ubuntu's früherer Init-Ersatz (deprecated)

**Cron Best Practices:**
  * **Vollständige Pfade** in Scripts verwenden
  * **Logging** für alle wichtigen Cron-Jobs aktivieren
  * **Error-Handling** in Scripts implementieren
  * **Environment-Variablen** explizit setzen
  * **Timing-Konflikte** vermeiden (nicht alle Jobs zur gleichen Zeit)

**Cron-Environment:**
<code>
# Crontab-Umgebung setzen
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=admin@example.com

# Jobs mit Output-Redirection
0 2 * * * /usr/local/bin/backup.sh >> /var/log/backup.log 2>&1
</code>

**Sicherheitshinweise:**
  * **Permissions** für Cron-Scripts korrekt setzen (755)
  * **Sensitive Daten** nicht in Crontab-Einträgen
  * **System-Updates** außerhalb der Arbeitszeit planen
  * **Monitoring** für kritische Cron-Jobs implementieren
  * **Backup** von Crontab-Konfigurationen

**Incron-Besonderheiten:**
  * **inotify-Limits** beachten (fs.inotify.max_user_watches)
  * **Rekursive Überwachung** kann ressourcenintensiv sein
  * **Event-Flooding** vermeiden (zu viele Events)
  * **Berechtigungen** für überwachte Pfade prüfen

----

===== Alternativen =====

**Init-Systeme:**
  * **systemd**: Standard in modernen Distributionen
  * **SysV Init**: Traditionelles Init-System
  * **OpenRC**: Alpine Linux und Gentoo
  * **runit**: Minimalistisches Init-System
  * **s6**: Supervision Suite
  * **Upstart**: Ehemals Ubuntu (deprecated)

**Task-Scheduling Alternativen:**
  * **systemd-timers**: Moderne Alternative zu cron
  * **at**: Einmalige Aufgaben zu bestimmter Zeit
  * **anacron**: Für Systeme die nicht 24/7 laufen
  * **fcron**: Erweiterte cron-Funktionalität
  * **dcron**: Vixie cron Implementierung

**File-Monitoring Alternativen:**
  * **inotify-tools**: Kommandozeilen inotify Interface
  * **entr**: Einfaches File-Watching Tool
  * **fswatch**: Cross-Platform File-Monitor
  * **watchman**: Facebook's File-Watcher
  * **nodemon**: Node.js File-Watcher

**Systemd-Timer Beispiele:**
<code>
# Timer-Datei: /etc/systemd/system/backup.timer
[Unit]
Description=Daily Backup Timer

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target

# Service-Datei: /etc/systemd/system/backup.service
[Unit]
Description=Daily Backup Service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/backup.sh

# Timer aktivieren
systemctl enable backup.timer
systemctl start backup.timer
</code>

**Process-Management:**
  * **supervisor**: Python-basierter Process-Manager
  * **pm2**: Node.js Process-Manager
  * **monit**: System-Monitoring und Process-Management
  * **God**: Ruby-basierter Process-Monitor

----

===== Weitere Informationen =====

**Manual Pages:**
<code>
man systemctl              # Systemd Service-Kontrolle
man systemd                # Systemd Überblick
man journalctl             # Systemd Journal
man crontab                # Cron-Verwaltung
man 5 crontab              # Crontab-Format
man incrontab              # Incron-Verwaltung
man systemd.service        # Service-Unit-Dateien
man systemd.timer          # Timer-Unit-Dateien
man systemd-analyze        # Boot-Analyse
</code>

**Wichtige Konfigurationsdateien:**
  * **/etc/systemd/system/**: Benutzerdefinierte Service-Units
  * **/lib/systemd/system/**: System-Service-Units
  * **/etc/crontab**: System-weite Crontab
  * **/var/spool/cron/crontabs/**: Benutzer-Crontabs
  * **/etc/cron.d/**: Zusätzliche Cron-Konfigurationen
  * **/etc/incron.d/**: System-weite Incron-Konfigurationen
  * **/etc/default/grub**: GRUB-Konfiguration
  * **/boot/grub/grub.cfg**: GRUB-Menü-Konfiguration

**Log-Dateien und -Analyse:**
  * **journalctl**: Systemd Journal (alle Logs)
  * **/var/log/cron.log**: Cron-spezifische Logs
  * **/var/log/boot.log**: Boot-Messages
  * **/var/log/messages**: Allgemeine System-Messages
  * **/var/log/syslog**: System-Log
  * **dmesg**: Kernel-Ring-Buffer

**Online-Ressourcen:**
  * [[https://www.freedesktop.org/wiki/Software/systemd/|Systemd Documentation]]
  * [[https://wiki.archlinux.org/title/Systemd|Arch Linux Systemd Guide]]
  * [[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/index|Red Hat System Configuration]]
  * [[https://crontab.guru/|Crontab Expression Generator]]

**Weiterführende Themen:**
  * Systemd Service-Unit Erstellung
  * GRUB-Konfiguration und -Anpassung
  * System-Performance-Optimierung beim Boot
  * Container-Orchestrierung (Docker, Kubernetes)
  * High-Availability Clustering
  * Automated Deployment und Configuration Management
  * Monitoring und Alerting für kritische Services

**Troubleshooting-Tools:**
<code>
# Boot-Probleme diagnostizieren
systemd-analyze blame           # Langsamste Services
systemd-analyze critical-chain  # Boot-Abhängigkeiten
journalctl -b -p err           # Boot-Fehler
systemctl --failed             # Fehlgeschlagene Services

# Cron-Probleme
grep CRON /var/log/syslog      # Cron-Aktivitäten
sudo tail -f /var/log/cron.log # Live Cron-Log
systemctl status cron         # Cron-Service Status

# Service-Debugging
systemctl status service_name -l  # Detaillierter Service-Status
journalctl -u service_name -f     # Live Service-Log
</code>

**Best Practices:**
  * Regelmäßige Boot-Zeit-Analyse
  * Monitoring kritischer Services
  * Backup von Service-Konfigurationen
  * Dokumentation aller automatisierten Tasks
  * Testing von Cron-Jobs in Entwicklungsumgebung



